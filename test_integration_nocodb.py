#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º NocoDB API
–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env.test

–ó–∞–ø—É—Å–∫:
  export TEST_ENV=test && pytest test_integration_nocodb.py -v -s

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env.test:
  NOCODB_API_URL=https://app.nocodb.com
  NOCODB_API_TOKEN=your_real_token
  NOCODB_TABLE_ID=your_real_table_id
"""
import pytest
import asyncio
import httpx
import os
from pathlib import Path
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
test_env_path = Path(__file__).parent / ".env.test"
if test_env_path.exists():
    load_dotenv(test_env_path)
else:
    print("‚ö†Ô∏è –§–∞–π–ª .env.test –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env")
    load_dotenv(Path(__file__).parent / ".env")

NOCODB_API_URL = os.getenv("NOCODB_API_URL", "https://app.nocodb.com")
NOCODB_API_TOKEN = os.getenv("NOCODB_API_TOKEN")
NOCODB_TABLE_ID = os.getenv("NOCODB_TABLE_ID")

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
pytestmark = pytest.mark.skipif(
    not NOCODB_API_TOKEN or not NOCODB_TABLE_ID,
    reason="NocoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NOCODB_API_TOKEN –∏ NOCODB_TABLE_ID"
)


class TestNocoDBIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º NocoDB API"""

    @pytest.fixture(autouse=True)
    def setup(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.test_records = []  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        yield
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        asyncio.run(self.cleanup_test_records())

    async def cleanup_test_records(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ NocoDB"""
        headers = {
            "xc-token": NOCODB_API_TOKEN,
            "Content-Type": "application/json"
        }

        async with httpx.AsyncClient() as client:
            for record_id in self.test_records:
                try:
                    await client.delete(
                        f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                        headers=headers,
                        timeout=10.0
                    )
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {record_id}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {record_id}: {e}")

    @pytest.mark.asyncio
    async def test_create_payment_record(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π NocoDB"""
        headers = {
            "xc-token": NOCODB_API_TOKEN,
            "Content-Type": "application/json"
        }

        test_user_id = int(time.time())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        data = {
            "TG ID": test_user_id,
            "TG": "test_integration_user",
            "Price": 1000,
            "Paid": False
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=data,
                timeout=10.0
            )

            assert response.status_code in [200, 201], f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.text}"

            result = response.json()
            record_id = str(result.get("Id") or result.get("id"))

            assert record_id is not None, "–ù–µ –ø–æ–ª—É—á–µ–Ω ID –∑–∞–ø–∏—Å–∏"
            self.test_records.append(record_id)

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: {record_id}")
            return record_id

    @pytest.mark.asyncio
    async def test_read_payment_record(self):
        """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ NocoDB"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record_id = await self.test_create_payment_record()

        headers = {
            "xc-token": NOCODB_API_TOKEN
        }

        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                headers=headers,
                timeout=10.0
            )

            assert response.status_code == 200, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {response.text}"

            data = response.json()
            assert data.get("Paid") is False, "–ü–æ–ª–µ Paid –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False"
            assert data.get("TG") == "test_integration_user"

            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {data}")

    @pytest.mark.asyncio
    async def test_update_payment_status(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record_id = await self.test_create_payment_record()

        headers = {
            "xc-token": NOCODB_API_TOKEN,
            "Content-Type": "application/json"
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω–æ"
        update_data = {
            "Id": int(record_id),
            "Paid": True
        }

        async with httpx.AsyncClient() as client:
            response = await client.patch(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=update_data,
                timeout=10.0
            )

            assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                headers=headers,
                timeout=10.0
            )

            data = response.json()
            assert data.get("Paid") is True, "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –Ω–∞ True"

            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {data}")

    @pytest.mark.asyncio
    async def test_list_payment_records(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        record_id_1 = await self.test_create_payment_record()
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        headers = {
            "xc-token": NOCODB_API_TOKEN,
            "Content-Type": "application/json"
        }

        test_user_id = int(time.time())
        data = {
            "TG ID": test_user_id,
            "TG": "test_user_2",
            "Price": 1000,
            "Paid": False
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=data,
                timeout=10.0
            )
            result = response.json()
            record_id_2 = str(result.get("Id") or result.get("id"))
            self.test_records.append(record_id_2)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                timeout=10.0
            )

            assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.text}"

            data = response.json()
            records = data.get("list") or data.get("data") or []

            assert len(records) >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏"

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(records)} –∑–∞–ø–∏—Å–µ–π")

    @pytest.mark.asyncio
    async def test_payment_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–æ–º"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞—Ç–µ–∂–∞:")

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ...")
        headers = {
            "xc-token": NOCODB_API_TOKEN,
            "Content-Type": "application/json"
        }

        test_user_id = int(time.time())
        data = {
            "TG ID": test_user_id,
            "TG": f"workflow_test_{test_user_id}",
            "Price": 1000,
            "Paid": False
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=data,
                timeout=10.0
            )

            assert response.status_code in [200, 201]
            result = response.json()
            record_id = str(result.get("Id") or result.get("id"))
            self.test_records.append(record_id)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {record_id}")

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)
            print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)...")
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                headers=headers,
                timeout=10.0
            )
            data = response.json()
            assert data.get("Paid") is False
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å: –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ")

            # 3. –°–∏–º—É–ª—è—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è (–∫–∞–∫ –≤ –±–æ—Ç–µ)
            print("3Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
            await asyncio.sleep(1)

            # 4. –ê–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
            print("4Ô∏è‚É£ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂...")
            update_data = {"Id": int(record_id), "Paid": True}
            response = await client.patch(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=update_data,
                timeout=10.0
            )
            assert response.status_code == 200
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å...")
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                headers=headers,
                timeout=10.0
            )
            data = response.json()
            assert data.get("Paid") is True
            print("   ‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

            print("\n‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    @pytest.mark.asyncio
    async def test_api_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API"""
        headers = {
            "xc-token": "invalid_token",
            "Content-Type": "application/json"
        }

        async with httpx.AsyncClient() as client:
            with pytest.raises(httpx.HTTPStatusError):
                response = await client.get(
                    f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/999999",
                    headers=headers,
                    timeout=10.0
                )
                response.raise_for_status()

        print("‚úÖ –û—à–∏–±–∫–∏ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")


class TestNocoDBConnection:
    """–¢–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NocoDB"""

    @pytest.mark.asyncio
    async def test_nocodb_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NocoDB"""
        if not NOCODB_API_TOKEN or not NOCODB_TABLE_ID:
            pytest.skip("NocoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        headers = {
            "xc-token": NOCODB_API_TOKEN
        }

        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records?limit=1",
                headers=headers,
                timeout=10.0
            )

            assert response.status_code == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {response.text}"
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NocoDB —É—Å–ø–µ—à–Ω–æ: {NOCODB_API_URL}")

    def test_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        assert NOCODB_API_URL, "NOCODB_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert NOCODB_API_TOKEN, "NOCODB_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert NOCODB_TABLE_ID, "NOCODB_TABLE_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        print(f"‚úÖ API URL: {NOCODB_API_URL}")
        print(f"‚úÖ Table ID: {NOCODB_TABLE_ID}")
        print(f"‚úÖ Token: {'*' * 10}{NOCODB_API_TOKEN[-5:]}")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ NocoDB\n")
    print(f"API URL: {NOCODB_API_URL}")
    print(f"Table ID: {NOCODB_TABLE_ID}")
    print(f"Token: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if NOCODB_API_TOKEN else '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n")

    pytest.main([__file__, "-v", "-s", "--tb=short"])

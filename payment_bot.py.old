#!/usr/bin/env python3
"""
Telegram bot –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π NocoDB
"""
import asyncio
import signal
import httpx
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from config import config

# Load configuration from centralized config
BOT_TOKEN = config.BOT_TOKEN
NOCODB_API_URL = config.NOCODB_API_URL
NOCODB_API_TOKEN = config.NOCODB_API_TOKEN
NOCODB_TABLE_ID = config.NOCODB_TABLE_ID

# Payment settings will be loaded from NocoDB at runtime
PAYMENT_PHONE = "+7 (999) 123-45-67"  # Default, overridden by NocoDB
PAYMENT_AMOUNT = "1000 —Ä—É–±–ª–µ–π"  # Default, overridden by NocoDB
TELEGRAM_GROUP_LINK = "https://t.me/your_group_link"  # Default, overridden by NocoDB

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É
pending_payments: Dict[int, str] = {}  # user_id -> nocodb_record_id

# Global application instance for graceful shutdown
application: Optional[Application] = None
shutdown_event = asyncio.Event()


async def create_payment_record(user_id: int, username: str, first_name: str) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ NocoDB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–ø–∏—Å–∏"""
    if not NOCODB_API_TOKEN or not NOCODB_TABLE_ID:
        print("‚ö†Ô∏è NocoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
        return None

    headers = {
        "xc-token": NOCODB_API_TOKEN,
        "Content-Type": "application/json"
    }

    data = {
        "TG": username or "",
        "TG ID": user_id,
        "Price": int(PAYMENT_AMOUNT.split()[0]) if PAYMENT_AMOUNT else 1000,
        "Paid": False
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=data,
                timeout=10.0
            )
            response.raise_for_status()
            result = response.json()
            return str(result.get("Id") or result.get("id"))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ NocoDB: {e}")
        return None


async def check_payment_in_nocodb(record_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ NocoDB –ø–æ ID –∑–∞–ø–∏—Å–∏"""
    if not NOCODB_API_TOKEN or not NOCODB_TABLE_ID or not record_id:
        return False

    headers = {
        "xc-token": NOCODB_API_TOKEN
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
                headers=headers,
                timeout=10.0
            )
            response.raise_for_status()
            data = response.json()
            return data.get("Paid", False) is True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ NocoDB: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="pay_ticket")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        "üéâ –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã."
    )

    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


async def payment_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_id = user.id

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ NocoDB
    record_id = await create_payment_record(user_id, user.username, user.first_name)

    if record_id:
        pending_payments[user_id] = record_id
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ NocoDB: {record_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        pending_payments[user_id] = ""
        print(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    payment_message = (
        "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{PAYMENT_PHONE}</code>\n"
        f"üíµ –°—É–º–º–∞: <b>{PAYMENT_AMOUNT}</b>\n\n"
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n"
        "3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã..."
    )

    await query.edit_message_text(payment_message, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    asyncio.create_task(check_payment_status(context, user_id, query.message.chat_id))


async def check_payment_status(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ NocoDB"""
    try:
        while user_id in pending_payments and not shutdown_event.is_set():
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            # Check if shutdown requested
            if shutdown_event.is_set():
                print(f"‚èπÔ∏è  Stopping payment check for user {user_id} due to shutdown")
                break

            record_id = pending_payments.get(user_id)
            if not record_id:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ NocoDB
            is_paid = await check_payment_in_nocodb(record_id)

            if is_paid:
                success_message = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.\n\n"
                    f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ:\n"
                    f"{TELEGRAM_GROUP_LINK}\n\n"
                    "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏! üéâ"
                )

                await context.bot.send_message(chat_id=chat_id, text=success_message, parse_mode="HTML")
                del pending_payments[user_id]
                print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                break
    except asyncio.CancelledError:
        print(f"‚èπÔ∏è  Payment check cancelled for user {user_id}")
        raise


async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>
    """
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <user_id>")
        return

    try:
        user_id = int(context.args[0])
        if user_id in pending_payments:
            # –í production —Ä–µ–∂–∏–º–µ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
            await update.message.reply_text(
                f"‚ö†Ô∏è –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ NocoDB: {NOCODB_API_URL}\n"
                f"User ID: {user_id}\n"
                f"Record ID: {pending_payments[user_id]}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")


async def list_pending(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É"""
    if not pending_payments:
        await update.message.reply_text("üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É.")
        return

    message = "üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É:</b>\n\n"
    for user_id, record_id in pending_payments.items():
        message += f"User ID: <code>{user_id}</code> | Record: <code>{record_id or 'local'}</code>\n"

    await update.message.reply_text(message, parse_mode="HTML")


def signal_handler(signum, _frame):
    """Handle shutdown signals"""
    print(f"\n‚ö†Ô∏è  Received signal {signum}, initiating shutdown...")
    shutdown_event.set()


async def cleanup():
    """Cleanup resources on shutdown"""
    global application

    print("\nüõë Shutting down gracefully...")

    # Wait a moment for any pending operations
    await asyncio.sleep(0.5)

    # Stop application
    if application:
        print("‚èπÔ∏è  Stopping bot application...")
        await application.stop()
        await application.shutdown()
        print("‚úÖ Bot stopped cleanly")

    print("üëã Goodbye!")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global application

    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NocoDB
    if not NOCODB_API_TOKEN or not NOCODB_TABLE_ID:
        print("‚ö†Ô∏è NocoDB –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
        print("   –î–æ–±–∞–≤—å—Ç–µ NOCODB_API_TOKEN –∏ NOCODB_TABLE_ID –≤ .env –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

    # Setup signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("confirm", confirm_payment))
    application.add_handler(CommandHandler("pending", list_pending))
    application.add_handler(CallbackQueryHandler(payment_button, pattern="^pay_ticket$"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! (Press Ctrl+C to stop)")

    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False  # We'll handle cleanup ourselves
        )
    except KeyboardInterrupt:
        pass
    finally:
        # Run cleanup
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(cleanup())
        finally:
            loop.close()


if __name__ == "__main__":
    main()

package scheduler

import (
	"time"

	"meetping/internal/repo"
	"meetping/internal/service"
)

type CronJobs struct {
	Repo    *repo.Repository
	Digests *service.DigestService
	BotSend func(user repo.User, items []service.DigestItem) // passed from bot
}

func (c *CronJobs) Start() {
	go c.runDigestLoop()
	go c.runFakeActivity()
	go c.runReminders()
	go c.runFeedbackRequests()
}

// üì® –†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ digest_time
func (c *CronJobs) runDigestLoop() {
	ticker := time.NewTicker(1 * time.Minute)
	for range ticker.C {
		now := time.Now().Format("15:04")
		users, _ := c.Repo.GetUsersByDigestTime(now)
		for _, u := range users {
			cityID := c.Repo.GetPrimaryCityID(u.ID)
			events, _ := c.Digests.GetDigestForUser(u.ID, cityID)
			if len(events) > 0 {
				c.BotSend(u, events)
			}
		}
	}
}

// ü§ñ –§–µ–π–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–∞–∑ –≤ 5 –º–∏–Ω)
func (c *CronJobs) runFakeActivity() {
	ticker := time.NewTicker(5 * time.Minute)
	for range ticker.C {
		eventIDs := c.Repo.GetActiveEvents()
		for _, eid := range eventIDs {
			_ = c.Repo.InsertFakeScore(eid, "like")
		}
	}
}

// üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω –¥–æ —Å–æ–±—ã—Ç–∏—è
func (c *CronJobs) runReminders() {
	ticker := time.NewTicker(5 * time.Minute)
	for range ticker.C {
		upcoming := c.Repo.GetUpcomingRSVPs(30 * time.Minute)
		for _, pair := range upcoming {
			user := c.Repo.GetUserByID(pair.UserID)
			event := c.Repo.GetEventByID(pair.EventID)
			msg := service.DigestItem{
				EventID:     event.ID,
				Title:       "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + event.Title,
				Description: event.Description,
				Date:        event.Date,
			}
			c.BotSend(user, []service.DigestItem{msg})
		}
	}
}

// üìù –§–∏–¥–±—ç–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
func (c *CronJobs) runFeedbackRequests() {
	ticker := time.NewTicker(10 * time.Minute)
	for range ticker.C {
		ended := c.Repo.GetPastRSVPsWithoutFeedback()
		for _, pair := range ended {
			user := c.Repo.GetUserByID(pair.UserID)
			msg := service.DigestItem{
				EventID:     pair.EventID,
				Title:       "üôè –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º",
				Description: "–ö–∞–∫ –≤–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
			}
			c.BotSend(user, []service.DigestItem{msg})
		}
	}
}

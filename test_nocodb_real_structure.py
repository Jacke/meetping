#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã NocoDB
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: TG, TG ID, Price
"""
import asyncio
import httpx
import os
import time
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env.test")

NOCODB_API_URL = os.getenv("NOCODB_API_URL", "https://app.nocodb.com")
NOCODB_API_TOKEN = os.getenv("NOCODB_API_TOKEN")
NOCODB_TABLE_ID = os.getenv("NOCODB_TABLE_ID")


async def get_table_structure():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    print("üìã –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")

    headers = {"xc-token": NOCODB_API_TOKEN}

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records?limit=1",
            headers=headers,
            timeout=10.0
        )

        if response.status_code == 200:
            data = response.json()
            records = data.get("list", [])
            if records:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
                for key, value in records[0].items():
                    print(f"   - {key}: {type(value).__name__}")
                return records[0].keys()
            else:
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return []
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return []


async def create_test_payment():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞"""
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞...")

    headers = {
        "xc-token": NOCODB_API_TOKEN,
        "Content-Type": "application/json"
    }

    test_user_id = int(time.time())
    test_username = f"test_user_{test_user_id}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
    data = {
        "TG": test_username,
        "TG ID": test_user_id,
        "Price": 1000
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
            headers=headers,
            json=data,
            timeout=10.0
        )

        if response.status_code in [200, 201]:
            result = response.json()
            record_id = str(result.get("Id") or result.get("id"))
            print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ID={record_id}")
            print(f"   TG: {test_username}")
            print(f"   TG ID: {test_user_id}")
            print(f"   Price: 1000")
            return record_id, test_user_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"   {response.text}")
            return None, None


async def read_payment(record_id):
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞"""
    print(f"\n2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å —Å ID={record_id}...")

    headers = {"xc-token": NOCODB_API_TOKEN}

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
            headers=headers,
            timeout=10.0
        )

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–æ—á–∏—Ç–∞–Ω–∞:")
            print(f"   Id: {data.get('Id')}")
            print(f"   TG: {data.get('TG')}")
            print(f"   TG ID: {data.get('TG ID')}")
            print(f"   Price: {data.get('Price')}")
            print(f"   CreatedAt: {data.get('CreatedAt')}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {response.status_code}")
            print(f"   {response.text}")
            return None


async def update_payment_price(record_id, new_price):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞"""
    print(f"\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ {new_price}...")

    headers = {
        "xc-token": NOCODB_API_TOKEN,
        "Content-Type": "application/json"
    }

    update_data = {
        "Price": new_price
    }

    async with httpx.AsyncClient() as client:
        # –ü—Ä–æ–±—É–µ–º PATCH
        response = await client.patch(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
            headers=headers,
            json={"Id": record_id, **update_data},
            timeout=10.0
        )

        if response.status_code == 200:
            print(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (PATCH)")
            return True
        else:
            print(f"‚ö†Ô∏è PATCH –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            print(f"   –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: PUT
            response = await client.put(
                f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records",
                headers=headers,
                json=[{"Id": record_id, **update_data}],
                timeout=10.0
            )

            if response.status_code == 200:
                print(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (PUT)")
                return True
            else:
                print(f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {response.status_code}")
                print(f"   {response.text}")
                return False


async def list_all_payments():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    print(f"\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π...")

    headers = {"xc-token": NOCODB_API_TOKEN}

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records?limit=10",
            headers=headers,
            timeout=10.0
        )

        if response.status_code == 200:
            data = response.json()
            records = data.get("list", [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            for record in records[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - ID={record.get('Id')}, TG={record.get('TG')}, Price={record.get('Price')}")
            if len(records) > 3:
                print(f"   ... –∏ –µ—â—ë {len(records) - 3} –∑–∞–ø–∏—Å–µ–π")
            return records
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return []


async def delete_payment(record_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞"""
    print(f"\n5Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å ID={record_id}...")

    headers = {"xc-token": NOCODB_API_TOKEN}

    async with httpx.AsyncClient() as client:
        response = await client.delete(
            f"{NOCODB_API_URL}/api/v2/tables/{NOCODB_TABLE_ID}/records/{record_id}",
            headers=headers,
            timeout=10.0
        )

        if response.status_code in [200, 204]:
            print(f"‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"   {response.text}")
            return False


async def main():
    print("="*60)
    print("üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã NocoDB")
    print("="*60)

    if not NOCODB_API_TOKEN or not NOCODB_TABLE_ID:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    print(f"\nüìç API URL: {NOCODB_API_URL}")
    print(f"üìç Table ID: {NOCODB_TABLE_ID}")
    print(f"üìç Token: {'*' * 10}{NOCODB_API_TOKEN[-5:]}")

    # –®–∞–≥ 0: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    await get_table_structure()

    # –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
    record_id, test_user_id = await create_test_payment()
    if not record_id:
        return

    # –®–∞–≥ 2: –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å
    await read_payment(record_id)

    # –®–∞–≥ 3: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    await update_payment_price(record_id, 2000)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await read_payment(record_id)

    # –®–∞–≥ 4: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫
    await list_all_payments()

    # –®–∞–≥ 5: –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await delete_payment(record_id)

    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(main())
